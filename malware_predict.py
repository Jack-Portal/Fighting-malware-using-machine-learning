#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PROJECT: Fighting malware using machine learning.

Provided with a file name in the current directory, this program will predict if
the file provided contains malware, and provide a prediction of the malware's
family.

For this program to work, it needs the following files:
    classificationAlgorithm.pkl  a trained Scikit-Learn classification algorithm
    detectionAlgorithm.pkl       a trained Scikit-Learn classification algorithm
    algorithmConfig.pkl          a file containing the config of the algorithms

It also requires the following libraries to be installed:
    Capstone        pip install Capstone 
                    http://www.capstone-engine.org/documentation.html
                    http://www.capstone-engine.org/download.html          
    Docopt          pip install Docopt==0.6.2
    numpy           pip install numpy
    scipy           pip install scipy
    progressbar     pip install brogressbar2
    Pickle          pip install pickle
    pyparsing       pip install pyparsing
    sklearn         conda install scikit-learn
                    pip install -U scikit-learn
    
Usage:
    malware_predict.py -i <file>
    malware_predict.py -d <file>
    malware_predict.py -b <file>
    malware_predict.py -f -i <folder>
    malware_predict.py -f -d <folder>
    malware_predict.py -f -b <folder>


Options:
    -i      specify file name to be analysed with IDA Pro files
    -d      specify file name to be analysed with files to be disassembled
            disassembled
    -b      specify file name to be analysed with text files containing binary
    -f      specify folder name to be analysed
    -h      show this screen
    
@author: Jacques-Antoine Portal
"""

from docopt import docopt
from disassemble import disassemble, opcodesToInt
from featureCount import getPredictionFeatures, OPCODES
from readFileASM import getOpcodeList
from getFileFamily import FAMILY
import pickle
import os

def loadPklFile(fileName, folderName = './'):
    '''
    Function that loads .pkl file
    '''
    file = open(os.path.join(folderName, fileName), 'rb')
    opcodes = pickle.load(file)
    file.close()
    return opcodes

def disassemble_and_predict(file_name, opcodesDict, family = FAMILY, binary = False):
    '''
    This function will disassemble the file provided and predict if it is malware.
    If it is, it will also predict what malware family it belongs to.
    '''
    classificationAlgorithm = loadPklFile('classificationAlgorithm.pkl')
    detectionAlgorithm = loadPklFile('detectionAlgorithm.pkl')
    length, skip_distance, powerOf2 = loadPklFile('algorithmConfig.pkl')
    opcodes = disassemble(file_name, binary)
    opcodes, opcodesDict = opcodesToInt(opcodes, opcodesDict)
    predictionMatrix = getPredictionFeatures(opcodes, length, skip_distance, powerOf2)
    prediction = detectionAlgorithm.predict(predictionMatrix)
    predictionList = detectionAlgorithm.predict(predictionMatrix)
    if prediction != -1:
        prediction += classificationAlgorithm.predict(predictionMatrix)
        predictionList = classificationAlgorithm.predict_proba(predictionMatrix)
    print( file_name, ': ', family[prediction[0]])
    print( file_name, ': ', predictionList)
    print()
    
def parse_and_predict(file_name, opcodesDict, family = FAMILY):
    '''
    This function will parse the file provided to extract the opcodes of the 
    assembly code and predict if it is malware.
    If it is, it will also predict what malware family it belongs to.
    '''
    classificationAlgorithm = loadPklFile('classificationAlgorithm.pkl')
    detectionAlgorithm = loadPklFile('detectionAlgorithm.pkl')
    length, skip_distance, powerOf2 = loadPklFile('algorithmConfig.pkl')
    opcodes, opcodesDict = getOpcodeList(file_name, opcodesDict)
    predictionMatrix = getPredictionFeatures(opcodes, length, skip_distance, powerOf2)
    prediction = detectionAlgorithm.predict(predictionMatrix)
    predictionList = detectionAlgorithm.predict(predictionMatrix)
    if prediction != -1:
        prediction += classificationAlgorithm.predict(predictionMatrix)
        predictionList = classificationAlgorithm.predict_proba(predictionMatrix)
    print( file_name, ': ', family[prediction[0]])
    print( file_name, ': ', predictionList)
    print()

def main(args):
    '''
    This function parses the input and calls the apropriate predict function.
    '''
    opcodesDict = loadPklFile('OPCODEDICT.pkl')
    file_name = ''
    i = args['-i']
    d = args['-d']
    b = args['-b']
    f = args['-f']
    file_name = args['<file>']
    folder_name = args['<folder>']
    if f:
        print('scanning folder:')
        if i:
            for file_name in os.listdir(folder_name):
                parse_and_predict(os.path.join(folder_name, file_name), opcodesDict, FAMILY)
        elif d:
            for file_name in os.listdir(folder_name):
                disassemble_and_predict(os.path.join(folder_name, file_name), opcodesDict, FAMILY)
        elif b:
            for file_name in os.listdir(folder_name):
                disassemble_and_predict(os.path.join(folder_name, file_name), opcodesDict, FAMILY, True)
    else:
        print('scanning file:')
        if i:
            parse_and_predict(file_name, opcodesDict, FAMILY)
        elif d:
            disassemble_and_predict(file_name, opcodesDict, FAMILY)
        elif b:
            disassemble_and_predict(file_name, opcodesDict, FAMILY, True)
    return 1

if __name__ == '__main__':
    args = docopt(__doc__)
    main(args)

# -*- coding: utf-8 -*-
"""
PROJECT: Fighting malware using machine learning.

This file contains all the functions needed to disassemble a given byte file
using the Capstone Python disassembler library, get all the opcodes of the
file and then transform the list of opcode to a list of int that can be used
by FeatureCount to get the sparse vector for this file.
@author: Jacques-Antoine Portal
"""

import capstone


def disassemble(fileName, txt = False):
    '''
    This fucntion uses Capstone disassembly library to retrun all the opcodes
    from the assembly code of the file given as argument.
    If the file given is not an executable file, but a text file containing
    the binary of an executable, the argument txt should be set to True.
    '''
    readBytes = 'r' if txt else 'rb'
    with open(fileName, readBytes) as f:
        file = f.read()
        if txt:
            file = file.split()
            CODE = []
            for i in file:
                if len(i)<3:
                    CODE += i.encode()
            CODE = bytes(CODE)
            file = CODE
        opcodes = []
        assemblyCode = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_32).disasm(file, 0x1000)
        index = 0
        for i in assemblyCode:
            index +=1
            opcodes += [i.mnemonic]
        return opcodes


def opcodesToInt(listOfOpcode, dictionary):
    '''
    This function uses a dictionary provided in the arguments to transform the 
    list of opcodes provided as argument to a list of integers that can be used 
    to compute the number of opcode kmers / skip-grams and get a sparse vector 
    representing the file using the functions from Feature Count.
    '''
    listOfInt = []
    for op in listOfOpcode:
        if op not in dictionary.keys():
            dictionary[op] = len(dictionary)
        listOfInt += [dictionary[op]]
    return listOfInt, dictionary
# -*- coding: utf-8 -*-
"""
PROJECT: Fighting malware using machine learning.

This file contains all fucntions needed to make a subset with an equal 
distribution of files than the one from the orriginal data set, or one provided.
@author: Jacques-Antoine Portal
"""

from getFileFamily import  FILEFAMILY, FILEARRAY, FAMILYREPARTITION
import random as r
import os
import progressbar


def getSubsetRepartition(subsetSize, RandomAdd = False, familyRepartition = FAMILYREPARTITION, fileFamilyLen = len(FILEARRAY)):
    '''
    This fuction is used to get the family repartition of a new subset.
    It takes as arguments:
        - subsetSize: the size of the desired subset
        - RandomAdd: if the family repartition needs to be exact or if the subset size is the most important
        - FamilyRepartition: The family repartition of a bigger set of files
        - fileFamilyLen: the length of the previous set of data.
    '''
    subsetRepartition = []
    for i in familyRepartition:
        a = i*subsetSize//fileFamilyLen
        subsetRepartition += [a]
    if RandomAdd:
        for l in range(subsetSize-sum(subsetRepartition)):
            subsetRepartition[r.randint(0, 8)] += 1
    return subsetRepartition


def generatesubset(subsetRepartition, fileArray = FILEARRAY, fileFamily = FILEFAMILY, Used = False):
    '''
    This fucntion generates one subset of file (list of file names)
    It takes as argument:
        - subsetRepartition: the new subset's family repartition
        - fileArray: the bigger set of files
        - fileFamily: dictionary associating every file in the bigger subset to 
                      a family
        - Used: a boolean used to check if the file is allready used in another function
                default: False
    '''
    fileNames = []
    for file in fileArray:
        if (fileFamily[file] != 'used'):
                if (subsetRepartition[fileFamily[file]-1] > 0):
                    subsetRepartition[fileFamily[file]-1] -= 1
                    fileNames += [file]
                    if Used:
                        fileFamily[file] = 'used'   #so that it can't be used again
                else:
                    if (max(subsetRepartition)==0):
                        break
    if Used:
        return fileNames, fileFamily
    return fileNames


def createSubset(subsetSize, fileFamily = FILEFAMILY, fileArray = FILEARRAY, familyRepartition = FAMILYREPARTITION):
    '''
    This function creates a subset of a given size: subsetSize.
    By default it uses the entire data set, but this can be modified with the function's arguments.
    '''
    subsetRepartition = getSubsetRepartition(subsetSize, True, familyRepartition)
    return generatesubset(subsetRepartition, fileArray, fileFamily)


def createSubsets(numberOfSubsets, fileFamily = FILEFAMILY, fileArray = FILEARRAY, familyRepartition = FAMILYREPARTITION):
    '''
    This function creates a list of *numberOfFiles* distinct subset of file names.
    '''
    subsetSize = len(fileArray) // numberOfSubsets
    subsets = []
    for n in range(numberOfSubsets):
        subsetRepartition = getSubsetRepartition(subsetSize, False, familyRepartition)
        subset, fileFamily = generatesubset(subsetRepartition, FILEARRAY, fileFamily, True)
        subsets += [subset]
    for file in fileArray:
        if (fileFamily[file] != 'used'):
            subsets[r.randint(0, numberOfSubsets-1)] += [file]
    return subsets


def makeSubsetFolder(subset, inputFolder = 'train/', outputFolder = 'train/subset/'):
    '''
    This function takes all the files from a subset and copies them from an input folder
    to an output folder.
    '''
    bar = progressbar.ProgressBar()
    for filename in bar(os.listdir(inputFolder)):
        if filename.endswith(".asm"): 
            if filename[0:-4] in subset:
                a = os.path.normpath(outputFolder)
                with open(os.path.join(inputFolder, filename), "r", encoding='ISO-8859-1') as asmFile:
                    with open(os.path.join(a, filename), 'w', encoding='ISO-8859-1') as outputFile:
                        outputFile.write(asmFile.read())
 
         
def subsetFromFilesInDirectory(dirName):
    '''
    This fucntion creates a subset of files using all the files in the provided 
    dictionary / folder.
    '''  
    SUBSET = []
    for filename in os.listdir(dirName):
        SUBSET += [filename[0:-8]]
    return SUBSET
            
            
# -*- coding: utf-8 -*-
"""
PROJECT: Fighting malware using machine learning.

This file contains all the functions needed to hash features and keep track of 
the features in a dictionary.
@author: Jacques-Antoine Portal
"""

import pickle


def getHashN(feature, powerOf2 = 18):
    '''
    This function gets a shorter hash for any feature provided as argument
    it takes as argument:
        - feature
        - powerOf2: the length in bits of the hash number returned (by default 18)
    '''
    b = pow(2, powerOf2+1) -1
    return b & hash(feature)


def getHashFeatureDic(farray):
    '''
    returns a dictionary of features with every feature (hashed) from farray as 
    a key, and every value is 0.
    '''
    dictionary = {}
    for f in farray:
        dictionary[getHashN(f)] = 0
    return dictionary


def getHashFeatureArray(farray = None, powerOf2 = 18):
    '''
    returns an empty array long enough to get all the hashed features
    '''
    try:
        hashArray = [getHashN(f) for f in farray]
        maxHash = max(hashArray)
        emptyArray = [0 for h in range(maxHash+1)]
        return emptyArray
    except:
        return [0 for i in range(pow(2, powerOf2+1)-1)]



def getFeatureDictN(features, n = 18):
    '''
    returns a dictionary with hashed numbers as keys, and features as values.
    used when trying to retrieve the feature from a hashed number
    '''
    hashDictN = {}
    for f in features:
        key = getHashN(f, n)
        if key in hashDictN:
            hashDictN[key] += [f]
        else:
            hashDictN[key] = [f]
    return hashDictN
